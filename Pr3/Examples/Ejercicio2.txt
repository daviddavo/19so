// David Cantador Piedras ***REMOVED***W
// David Davó Laviña ***REMOVED***


------------------------------
-- El código partial_sum1.c lanza dos hilos encargados de colaborar en el cálculo
-- del sumatorio \sum_1^{10000} n
-- Después de ejecutarlo varias veces observamos que no siempre ofrece el resultado
-- correcto, ¿Por qué? En caso de no ser así, utiliza el ejemplo codificado en
-- partial_sum2.c y observa que nunca tenemos el resultado correcto ¿Por qué?
------------------------------
El algoritmo de planificación que usa el SO es expropiativo, por lo que para la
operación en mitad de la "sección crítica" del programa. Por lo que, entre que lee,
suma y escribe, el otro recurso ya ha escrito, por lo que estamos escribiendo un
recurso desactualizado. Esto se puede ver más claro si lo hacemos paso a paso, y
ejecutando una operación yield (dar el paso a otro thread) en medio.

Para solucionarlo sería necesario usar algún mecanismo de sincronización (mutex,
semáforos, etc).

En este caso concreto, también podría solventarse calculando las dos sumas
parciales en dos variables distintas, y sumando luego esas dos variables.
resultado = sum1 + sum2

Ejemplo:
Hilo 1 lee 

Ejemplo:
Hilo 1 lee total_sum=150
yield()
---------
Hilo 2 lee total_sum=150
Hilo 2 suma total_sum+5001
Hilo 2 escribe total_sum=5151
yield()
---------
Hilo 1 suma total_sum+50
Hilo 1 escribe total_sum=200

Se ha ignorado lo que ha hecho el hilo 2
